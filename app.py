import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import duckdb
from openai import OpenAI

client = OpenAI(
  base_url = "https://integrate.api.nvidia.com/v1",
  api_key = "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"
)    
df = pd.read_csv('C:\\Users\\ASUS\\Desktop\\supply_chain\\bhoomi\\supply_chain_data.csv')

def gen_text(prompt):
    completion = client.chat.completions.create(
    model="meta/llama3-70b-instruct",
    messages=[{"role":"system","content":"You are a Supply Chain Optimization ChatBot ."},
              {"role":"user","content":f"{prompt} for the dataset {df}"}],
    temperature=0.7,#randomness or uniqueness
    top_p=1,
    max_tokens=1024,#no. of tokens by r output
    stream=True
    )
    return completion



st.markdown(
    """
    ### Supply Chain Optimization 
    """,
    unsafe_allow_html=True
)
user_input = st.text_input("Enter your query like generate demand forecast:")#returning a text box similar like html

if st.button('Generate Forecast'):
    st.write("Result")

    # Dummy completion code for demonstration
    completion = gen_text(user_input)
    st.write(completion)

col1, col2, col3 = st.columns([7, 7, 7])


with col1:
    query = """SELECT SUM("Revenue generated")AS total_revenue FROM df"""
    result = duckdb.query(query).df()

    total_revenue = result['total_revenue'][0]

    fig = go.Figure()

    fig.add_trace(go.Indicator(
        mode = "number",
        value = total_revenue,
        title = {"text": "Total Revenue Generated"},
        number = {'prefix': "₹"},
        domain = {'x': [0, 1], 'y': [0, 1]}
    ))

    fig.update_layout(
        font=dict(size=18),
        font_color = 'green',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig,use_container_width=True)
    
    # Bar graph for Revenue Generated by Product Type
    revenue_by_product_type = df.groupby('Product type')['Revenue generated'].sum().reset_index()
    fig = px.bar(revenue_by_product_type, x='Product type', y='Revenue generated', title='Revenue Generated by Product Type')
    st.plotly_chart(fig, use_container_width=True)
    
    
    # Pie chart for Order Quantities by Product Type
    order_quantities_by_product_type = df.groupby('Product type')['Order quantities'].sum().reset_index()
    fig = px.pie(order_quantities_by_product_type, names='Product type', values='Order quantities', title='Order Quantities by Product Type')
    st.plotly_chart(fig, use_container_width=True)

with col2:
    query = """SELECT SUM("Order quantities") AS "Total Orders Quantity"FROM df;"""

    result = duckdb.query(query).fetchall()

    total_orders_quantity = result[0][0]

    fig = go.Figure()

    fig.add_trace(go.Indicator(
        mode="number",
        value=total_orders_quantity,
        title={"text": "Total Orders Quantity"},
        domain = {'x': [0, 1], 'y': [0, 1]},
        number={"valueformat": ",.0f"}
    ))

    fig.update_layout(
        font=dict(size=18),
        font_color = 'black',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)
    
    
    # Bar graph for Availability by Product Type
    availability_by_product_type = df.groupby('Product type')['Availability'].sum().reset_index()
    fig = px.bar(availability_by_product_type, x='Product type', y='Availability', title='Availability by Product Type')
    st.plotly_chart(fig, use_container_width=True)
    
    # Pie chart for Number of Products Sold by Customer Demographics
    products_sold_by_customer_demographics = df.groupby('Customer demographics')['Number of products sold'].sum().reset_index()
    fig = px.pie(products_sold_by_customer_demographics, names='Customer demographics', values='Number of products sold', title='Products Sold by Customer Demographics')
    st.plotly_chart(fig, use_container_width=True)
    
with col3:
    total_availability = df['Availability'].sum()

    fig = go.Figure()

    fig.add_trace(go.Indicator(
        mode="number",
        value=total_availability,
        title={"text": "Total Availability"},
        domain={'x': [0, 1], 'y': [0, 1]}
    ))

    fig.update_layout(
        font=dict(size=18, color='black'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',

    )

    st.plotly_chart(fig,use_container_width=True)
    
    
    
    query = """
        SELECT "location",
        SUM("Revenue generated")::DECIMAL(8, 2) AS total_revenue
        FROM df
        GROUP BY "location"
        ORDER BY total_revenue DESC
        """
    result = duckdb.query(query).df()
    print(result)

    fig = px.pie(result, 
                values='total_revenue', 
                names='Location', 
                title='Revenue Distribution by Location',
                labels={'total_revenue': 'Total Revenue (₹)', 'Location': 'Location'},
                hover_name='Location',
                hover_data={'total_revenue': ':,.2f'}
                )

    fig.update_layout(
            margin=dict(l=40, r=40, t=40, b=40),
            font=dict(size=14, color='white'),
            plot_bgcolor='rgba(0, 0, 0, 0)',
            paper_bgcolor='rgba(0, 0, 0, 0)',
        )

    fig.update_traces(marker=dict(colors=['#d62728', '#e377c2', '#ff7f0e', '#ffbb78', '#ff9896']))

    fig.update_layout(
            showlegend=True,
            legend=dict(
                title='Location',
                orientation='v',
                yanchor='top',
                y=1,
                xanchor='left',
                x=0
            )
        )

    st.plotly_chart(fig,use_container_width=True)
    
    order_summary = df.groupby('Transportation modes')['Order quantities'].sum().reset_index()

    fig = px.sunburst(
        order_summary,
        path=['Transportation modes'],
        values='Order quantities',
        title='Total Order Quantities by Transportation Mode',
        color='Order quantities',
        color_continuous_scale=px.colors.sequential.Blues,
        labels={'Transportation modes': 'Transportation Mode', 'Order quantities': 'Total Order Quantities'},
    )

    fig.update_layout(
        font=dict(size=14, color='White'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig,use_container_width=True)